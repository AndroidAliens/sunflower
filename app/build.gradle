/*
 * Copyright 2018 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'dagger.hilt.android.plugin'
apply plugin: 'androidx.navigation.safeargs.kotlin'
//apply plugin: 'jacoco'


android {
    compileSdkVersion rootProject.compileSdkVersion
    buildFeatures {
        dataBinding = true
    }
    defaultConfig {
        flavorDimensions "version"
        applicationId "com.google.samples.apps.sunflower"
        minSdkVersion rootProject.minSdkVersion
        targetSdkVersion rootProject.targetSdkVersion
        testInstrumentationRunner "com.google.samples.apps.sunflower.utilities.MainTestRunner"
        versionName property('versionName')
        vectorDrawables.useSupportLibrary true
        versionCode = 1

        // Consult the README on instructions for setting up Unsplash API key
        buildConfigField("String", "UNSPLASH_ACCESS_KEY", "\"" + getUnsplashAccess() + "\"")
        javaCompileOptions {
            annotationProcessorOptions {
                arguments["dagger.hilt.disableModulesHaveInstallInCheck"] = "true"
            }
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            testCoverageEnabled true
        }
    }

    applicationVariants.all { variant ->
        variant.outputs.all {
            outputFileName = "../../sunflower.apk"
        }
    }

    testOptions {
        animationsDisabled true
        unitTests {
            includeAndroidResources = true
        }
    }

    productFlavors {
        production {

        }
        staging {

        }
        development {
            
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        // work-runtime-ktx 2.1.0 and above now requires Java 8
        jvmTarget = "1.8"

        // Enable Coroutines and Flow APIs
        freeCompilerArgs += "-Xopt-in=kotlinx.coroutines.ExperimentalCoroutinesApi"
        freeCompilerArgs += "-Xopt-in=kotlinx.coroutines.FlowPreview"
    }
}

dependencies {
    compileOnly "com.squareup.inject:assisted-inject-annotations-dagger2:$rootProject.assistedInjectVersion"
    kapt "androidx.room:room-compiler:$rootProject.roomVersion"
    kapt "com.github.bumptech.glide:compiler:$rootProject.glideVersion"
    kapt "com.google.dagger:hilt-android-compiler:$rootProject.hiltVersion"
    kapt "androidx.hilt:hilt-compiler:$rootProject.hiltViewModelVersion"
    kapt "com.squareup.inject:assisted-inject-processor-dagger2:$rootProject.assistedInjectVersion"
    implementation "androidx.appcompat:appcompat:$rootProject.appCompatVersion"
    implementation "androidx.constraintlayout:constraintlayout:$rootProject.constraintLayoutVersion"
    implementation "androidx.core:core-ktx:$rootProject.ktxVersion"
    implementation "androidx.fragment:fragment-ktx:$rootProject.fragmentVersion"
    implementation "androidx.lifecycle:lifecycle-extensions:$rootProject.lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$rootProject.lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$rootProject.lifecycleVersion"
    implementation "androidx.navigation:navigation-fragment-ktx:$rootProject.navigationVersion"
    implementation "androidx.navigation:navigation-ui-ktx:$rootProject.navigationVersion"
    implementation "androidx.paging:paging-runtime:$rootProject.pagingVersion"
    implementation "androidx.recyclerview:recyclerview:$rootProject.recyclerViewVersion"
    implementation "androidx.room:room-runtime:$rootProject.roomVersion"
    implementation "androidx.room:room-ktx:$rootProject.roomVersion"
    implementation "androidx.viewpager2:viewpager2:$rootProject.viewPagerVersion"
    implementation "androidx.work:work-runtime-ktx:$rootProject.workVersion"
    implementation "com.github.bumptech.glide:glide:$rootProject.glideVersion"
    implementation "com.google.android.material:material:$rootProject.materialVersion"
    implementation "com.google.code.gson:gson:$rootProject.gsonVersion"
    implementation "com.squareup.okhttp3:logging-interceptor:$rootProject.okhttpLoggingVersion"
    implementation "com.squareup.retrofit2:converter-gson:$rootProject.retrofitVersion"
    implementation "com.squareup.retrofit2:retrofit:$rootProject.retrofitVersion"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$rootProject.coroutinesVersion"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$rootProject.coroutinesVersion"
    implementation "com.google.dagger:hilt-android:$rootProject.hiltVersion"
    implementation "androidx.hilt:hilt-lifecycle-viewmodel:$rootProject.hiltViewModelVersion"

    // Testing dependencies
    kaptAndroidTest "com.google.dagger:hilt-android-compiler:$rootProject.hiltVersion"
    androidTestImplementation "androidx.arch.core:core-testing:$rootProject.coreTestingVersion"
    androidTestImplementation "androidx.test.espresso:espresso-contrib:$rootProject.espressoVersion"
    androidTestImplementation "androidx.test.espresso:espresso-core:$rootProject.espressoVersion"
    androidTestImplementation "androidx.test.espresso:espresso-intents:$rootProject.espressoVersion"
    androidTestImplementation "androidx.test.ext:junit:$rootProject.testExtJunit"
    androidTestImplementation "androidx.test.uiautomator:uiautomator:$rootProject.uiAutomatorVersion"
    androidTestImplementation "androidx.work:work-testing:$rootProject.workVersion"
    androidTestImplementation "com.google.truth:truth:$rootProject.truthVersion"
    androidTestImplementation "com.google.dagger:hilt-android-testing:$rootProject.hiltVersion"
    testImplementation "junit:junit:$rootProject.junitVersion"
}

//jacoco {
//    toolVersion = '0.8.1' //Use latest version
//}

//project.afterEvaluate {
//    // Grab all build types and product flavors
//    def buildTypes = android.buildTypes.collect { type -> type.name }
//    def productFlavors = android.productFlavors.collect { flavor -> flavor.name }
//
//    // When no product flavors defined, use empty
//    if (!productFlavors) productFlavors.add('')
//
//    productFlavors.each { productFlavorName ->
//        buildTypes.each { buildTypeName ->
//            def sourceName, sourcePath
//            if (!productFlavorName) {
//                sourceName = sourcePath = "${buildTypeName}"
//            } else {
//                sourceName = "${productFlavorName}${buildTypeName.capitalize()}"
//                sourcePath = "${productFlavorName}/${buildTypeName}"
//            }
//            def testTaskName = "test${sourceName.capitalize()}UnitTest"
//
//            // Create coverage task of form 'testFlavorTypeCoverage' depending on 'testFlavorTypeUnitTest'
//            task "${testTaskName}Coverage" (type:JacocoReport, dependsOn: "$testTaskName") {
//                group = "Reporting"
//                description = "Generate Jacoco coverage reports on the ${sourceName.capitalize()} build."
//
//                def excludes = [
//                        '**/R.class',
//                        '**/R$*.class',
//                        '**/Manifest*.*',
//                        'android/**/*.*',
//                        '**/BuildConfig.*',
//                        '**/*$ViewBinder*.*',
//                        '**/*$ViewInjector*.*',
//                        '**/Lambda$*.class',
//                        '**/Lambda.class',
//                        '**/*Lambda.class',
//                        '**/*Lambda*.class'
//                ]
//
//                getClassDirectories().from(fileTree(
//                        dir: "${project.buildDir}/intermediates/classes/${sourcePath}",
//                        excludes: excludes
//                ) + fileTree(
//                        dir: "${project.buildDir}/tmp/kotlin-classes/${sourceName}",
//                        excludes: excludes
//                ))
//
//                def coverageSourceDirs = [
//                        "src/main/java",
//                        "src/$productFlavorName/java",
//                        "src/$buildTypeName/java"
//                ]
//                getAdditionalSourceDirs().from(files(coverageSourceDirs))
//                getSourceDirectories().from(files(coverageSourceDirs))
//                getExecutionData().from(files("${project.buildDir}/jacoco/${testTaskName}.exec"))
//
//                reports {
//                    xml.enabled = true
//                    html.enabled = true
//                    csv.enabled = true
//                }
//            }
//        }
//    }
//}

tasks.whenTaskAdded { task ->
    if (task.name.startsWith("assemble")) {
        def renameTaskName = "rename${task.name.capitalize()}Apk"
        def flavor = task.name.substring("assemble".length()).uncapitalize()
        def fileName = System.getenv('FILE_NAME') as String ?: "no_name"
        println "${flavor}"
        println "${fileName}"
        tasks.create(renameTaskName, Copy) {
            def path = "${buildDir}/outputs/apk/"
            println "$path"
            from(path)
            include "sunflower.apk"
            destinationDir file("${buildDir}/outputs/renamedApk/")
            rename "sunflower.apk", "${fileName}.apk"
        }

        task.finalizedBy(renameTaskName)
    }
}

def getUnsplashAccess() {
    return project.findProperty("unsplash_access_key")
}
